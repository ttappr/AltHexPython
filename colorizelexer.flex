/*******************************************************************************
 * MIT License
 *
 * Copyright (c) 2018 cepholution@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

%{
/**
 * To generate the lexer, run flex on this file: flex colorizelexer.flex
 * This will produce the colorizelexer.yy.c file.
 *
 * This file defines a simple lexer grammaer for Python with action code that
 * adds IRC color codes to tokens.
 */

#pragma warning(disable:4005)

#include "minpython.h"

#pragma warning(default:4005)


// Custom parameters for yylex().
#define YY_DECL int yylex(yyscan_t yyscanner, \
                          PyObject *pylist, \
                          ColorizerParams *params)

// For explicit control over the yylex() switch statement breaks.
#define YY_BREAK

// #define YY_FATAL_ERROR(msg) \

PyObject *flex_colorize(PyObject *, ColorizerParams *);

#define lappend1(s) \
    pystr = PyUnicode_FromString(s); \
    PyList_Append(pylist, pystr); \
    Py_DECREF(pystr)

#define lappend2(c, s) \
    if (c != pylast_color) { \
        PyList_Append(pylist, c); \
    } \
    pystr = PyUnicode_FromString(s); \
    PyList_Append(pylist, pystr); \
    Py_DECREF(pystr); \
    pylast_color = c

%}
    // Code generation options.
%option reentrant noinput nounistd outfile="colorizelexer.yy.c"

    // Start conditions.
%x longquotestring longtickstring shortquotestring shorttickstring defclassdecl

    // Partial rules.
stringprefix        [rRuUfFbB]|[fF][rR]|[rR][fF]|[bB][rR]|[rR][bB]

hexinteger          0[xX](_?[0-9a-fA-F])+
octinteger          0[oO](_?[0-7])+
bininteger          0[bB](_?[01])+
decinteger          [0-9](_?[0-9])*
lonedecinteger      [1-9](_?[0-9])*|0+(_?0)*

integer             {lonedecinteger}|{bininteger}|{octinteger}|{hexinteger}
float               {decinteger}\.{decinteger}
exponential         ({decinteger}|{float})[eE][+-]?{decinteger}
imaginary           ({decinteger}|{float}|{exponential})[jJ]

    // Lax expressions for matching the usual identifier characters plus 
    // any 2, 3, or 4 byte utf-8 encoded character up to '\U0010ffff'. 
    // This is just a code highlighter so the rules don't need to be strict for 
    // it to work. Plus, the lexer tables for the strict expressions get quite
    // large.

lax_u8_2b           [\xc0-\xdf][\x80-\xbf]
lax_u8_3b           [\xe0-\xef][\x80-\xbf][\x80-\xbf]
lax_u8_4b_a         [\xf0-\xf3][\x80-\xbf][\x80-\xbf][\x80-\xbf]
lax_u8_4b_b         \xf4[\x80-\x8f][\x80-\xbf][\x80-\xbf]
lax_u8_4b           {lax_u8_4b_a}|{lax_u8_4b_b}

lax_start           [_a-zA-Z]|{lax_u8_2b}|{lax_u8_3b}|{lax_u8_4b}
lax_continue        [0-9]|{lax_start}

identifier          {lax_start}{lax_continue}*
                    
    // Strict expressions for utf-8 unicode identifiers below (this looks better 
    // with word wrap turned off).
    // These XID expressions were generated from tables in the Unicode Derived 
    // Core Properties report at
    // http://www.unicode.org/reports/tr44/. They match Unicode character ranges 
    // with the XID_Start and XID_Continue tags. This is likely a superset of 
    // the allowable characters defined by the Python project at
    // https://docs.python.org/3/reference/lexical_analysis.html#identifiers

    /*
    xid_start_1         [\x41-\x5a]|[\x61-\x7a]|\xc2(\xaa|\xb5|\xba)|\xc3([\x80-\x96]|[\x98-\xb6]|[\xb8-\xbf])|\xc6(\xbb|[\x80-\xba]|[\xbc-\xbf])|\xca(\x94|[\x80-\x93]|[\x95-\xbf])|\xcb(\xac|\xae|[\x80\x81]|[\x86-\x91]|[\xa0-\xa4])|\xcd(\xb4|\xbf|[\xb0-\xb3]|[\xb6\xb7]|[\xbb-\xbd])|\xce(\x86|\x8c|[\x88-\x8a]|[\x8e-\xa1]|[\xa3-\xbf])|\xcf([\x80-\xb5]|[\xb7-\xbf])|\xd2([\x80\x81]|[\x8a-\xbf])|\xd4([\x80-\xaf]|[\xb1-\xbf])|\xd5(\x99|[\x80-\x96]|[\xa0-\xbf])|\xd6[\x80-\x88]|\xd7([\x90-\xaa]|[\xaf-\xb2])|\xd8[\xa0-\xbf]|\xd9(\x80|[\x81-\x8a]|[\xae\xaf]|[\xb1-\xbf])|\xdb(\x95|\xbf|[\x80-\x93]|[\xa5\xa6]|[\xae\xaf]|[\xba-\xbc])|\xdc(\x90|[\x92-\xaf])|\xdd[\x8d-\xbf]|\xde(\xb1|[\x80-\xa5])|\xdf(\xba|[\x8a-\xaa]|[\xb4\xb5])|[\xc4\xc5][\x80-\xbf]|[\xc7-\xc9][\x80-\xbf]|[\xd0\xd1][\x80-\xbf]|\xd3[\x80-\xbf]|\xda[\x80-\xbf]
    xid_start_2         \xe0(\xa0(\x9a|\xa4|\xa8|[\x80-\x95])|\xa1([\x80-\x98]|[\xa0-\xaa])|\xa2([\xa0-\xb4]|[\xb6-\xbd])|\xa4(\xbd|[\x84-\xb9])|\xa5(\x90|\xb1|[\x98-\xa1]|[\xb2-\xbf])|\xa6(\xb2|\xbd|\x80|[\x85-\x8c]|[\x8f\x90]|[\x93-\xa8]|[\xaa-\xb0]|[\xb6-\xb9])|\xa7(\x8e|\xbc|[\x9c\x9d]|[\x9f-\xa1]|[\xb0\xb1])|\xa8([\x85-\x8a]|[\x8f\x90]|[\x93-\xa8]|[\xaa-\xb0]|[\xb2\xb3]|[\xb5\xb6]|[\xb8\xb9])|\xa9(\x9e|[\x99-\x9c]|[\xb2-\xb4])|\xaa(\xbd|[\x85-\x8d]|[\x8f-\x91]|[\x93-\xa8]|[\xaa-\xb0]|[\xb2\xb3]|[\xb5-\xb9])|\xab(\x90|\xb9|[\xa0\xa1])|\xac(\xbd|[\x85-\x8c]|[\x8f\x90]|[\x93-\xa8]|[\xaa-\xb0]|[\xb2\xb3]|[\xb5-\xb9])|\xad(\xb1|[\x9c\x9d]|[\x9f-\xa1])|\xae(\x83|\x9c|[\x85-\x8a]|[\x8e-\x90]|[\x92-\x95]|[\x99\x9a]|[\x9e\x9f]|[\xa3\xa4]|[\xa8-\xaa]|[\xae-\xb9])|\xaf\x90|\xb0(\xbd|[\x85-\x8c]|[\x8e-\x90]|[\x92-\xa8]|[\xaa-\xb9])|\xb1([\x98-\x9a]|[\xa0\xa1])|\xb2(\x80|\xbd|[\x85-\x8c]|[\x8e-\x90]|[\x92-\xa8]|[\xaa-\xb3]|[\xb5-\xb9])|\xb3(\x9e|[\xa0\xa1]|[\xb1\xb2])|\xb4(\xbd|[\x85-\x8c]|[\x8e-\x90]|[\x92-\xba])|\xb5(\x8e|[\x94-\x96]|[\x9f-\xa1]|[\xba-\xbf])|\xb6(\xbd|[\x85-\x96]|[\x9a-\xb1]|[\xb3-\xbb])|\xb7[\x80-\x86]|\xb8(\xb2|[\x81-\xb0])|\xb9(\x86|[\x80-\x85])|\xba(\x84|\x8a|\x8d|\xa5|\xa7|\xb2|\xbd|[\x81\x82]|[\x87\x88]|[\x94-\x97]|[\x99-\x9f]|[\xa1-\xa3]|[\xaa\xab]|[\xad-\xb0])|\xbb(\x86|[\x80-\x84]|[\x9c-\x9f])|\xbc\x80|\xbd([\x80-\x87]|[\x89-\xac])|\xbe[\x88-\x8c])
    xid_start_3         \xe1(\x80(\xbf|[\x80-\xaa])|\x81(\xa1|[\x90-\x95]|[\x9a-\x9d]|[\xa5\xa6]|[\xae-\xb0]|[\xb5-\xbf])|\x82(\x8e|[\x80\x81]|[\xa0-\xbf])|\x83(\x87|\x8d|\xbc|[\x80-\x85]|[\x90-\xba]|[\xbd-\xbf])|\x89(\x98|[\x80-\x88]|[\x8a-\x8d]|[\x90-\x96]|[\x9a-\x9d]|[\xa0-\xbf])|\x8a([\x80-\x88]|[\x8a-\x8d]|[\x90-\xb0]|[\xb2-\xb5]|[\xb8-\xbe])|\x8b(\x80|[\x82-\x85]|[\x88-\x96]|[\x98-\xbf])|\x8c([\x80-\x90]|[\x92-\x95]|[\x98-\xbf])|\x8d[\x80-\x9a]|\x8e([\x80-\x8f]|[\xa0-\xbf])|\x8f([\x80-\xb5]|[\xb8-\xbd])|\x90[\x81-\xbf]|\x99([\x80-\xac]|[\xaf-\xbf])|\x9a([\x81-\x9a]|[\xa0-\xbf])|\x9b([\x80-\xaa]|[\xae-\xb8])|\x9c([\x80-\x8c]|[\x8e-\x91]|[\xa0-\xb1])|\x9d([\x80-\x91]|[\xa0-\xac]|[\xae-\xb0])|\x9e[\x80-\xb3]|\x9f(\x97|\x9c)|\xa0[\xa0-\xbf]|\xa1(\x83|[\x80-\x82]|[\x84-\xb8])|\xa2(\xaa|[\x80-\xa8]|[\xb0-\xbf])|\xa3[\x80-\xb5]|\xa4[\x80-\x9e]|\xa5([\x90-\xad]|[\xb0-\xb4])|\xa6([\x80-\xab]|[\xb0-\xbf])|\xa7[\x80-\x89]|\xa8([\x80-\x96]|[\xa0-\xbf])|\xa9[\x80-\x94]|\xaa\xa7|\xac[\x85-\xb3]|\xad[\x85-\x8b]|\xae([\x83-\xa0]|[\xae\xaf]|[\xba-\xbf])|\xaf[\x80-\xa5]|\xb0[\x80-\xa3]|\xb1([\x8d-\x8f]|[\x9a-\xbd])|\xb2([\x80-\x88]|[\x90-\xba]|[\xbd-\xbf])|\xb3([\xa9-\xac]|[\xae-\xb1]|[\xb5\xb6])|\xb5(\xb8|[\x80-\xb7]|[\xb9-\xbf])|\xbc([\x80-\x95]|[\x98-\x9d]|[\xa0-\xbf])|\xbd(\x99|\x9b|\x9d|[\x80-\x85]|[\x88-\x8d]|[\x90-\x97]|[\x9f-\xbd])|\xbe(\xbe|[\x80-\xb4]|[\xb6-\xbc])|\xbf([\x82-\x84]|[\x86-\x8c]|[\x90-\x93]|[\x96-\x9b]|[\xa0-\xac]|[\xb2-\xb4]|[\xb6-\xbc])|[\x84-\x88][\x80-\xbf]|[\x91-\x98][\x80-\xbf]|\xb4[\x80-\xbf]|\xb6[\x80-\xbf]|[\xb8-\xbb][\x80-\xbf])
    xid_start_4         \xe2(\x81(\xb1|\xbf)|\x82[\x90-\x9c]|\x84(\x82|\x87|\x95|\x98|\xa4|\xa6|\xa8|\xae|\xb9|[\x8a-\x93]|[\x99-\x9d]|[\xaa-\xad]|[\xaf-\xb8]|[\xbc-\xbf])|\x85(\x8e|[\x85-\x89]|[\xa0-\xbf])|\x86[\x80-\x88]|\xb0([\x80-\xae]|[\xb0-\xbf])|\xb1([\x80-\x9e]|[\xa0-\xbf])|\xb3([\x80-\xa4]|[\xab-\xae]|[\xb2\xb3])|\xb4(\xa7|\xad|[\x80-\xa5]|[\xb0-\xbf])|\xb5(\xaf|[\x80-\xa7])|\xb6([\x80-\x96]|[\xa0-\xa6]|[\xa8-\xae]|[\xb0-\xb6]|[\xb8-\xbe])|\xb7([\x80-\x86]|[\x88-\x8e]|[\x90-\x96]|[\x98-\x9e])|\xb2[\x80-\xbf])|\xe3(\x80(\x85|\x86|\x87|\xbb|\xbc|[\xa1-\xa9]|[\xb1-\xb5]|[\xb8-\xba])|\x81[\x81-\xbf]|\x82(\x9f|[\x80-\x96]|[\x9d\x9e]|[\xa1-\xbf])|\x83(\xbf|[\x80-\xba]|[\xbc-\xbe])|\x84([\x85-\xaf]|[\xb1-\xbf])|\x86([\x80-\x8e]|[\xa0-\xba])|\x87[\xb0-\xbf]|\x85[\x80-\xbf]|[\x90-\xbf][\x80-\xbf])|\xe4(\xb6[\x80-\xb5]|[\x80-\xb5][\x80-\xbf]|[\xb8-\xbf][\x80-\xbf])|\xe9(\xbf[\x80-\xaf]|[\x80-\xbe][\x80-\xbf])|\xea(\x80(\x95|[\x80-\x94]|[\x96-\xbf])|\x92[\x80-\x8c]|\x93[\x90-\xbd]|\x98(\x8c|[\x80-\x8b]|[\x90-\x9f]|[\xaa\xab])|\x99(\xae|\xbf|[\x80-\xad])|\x9a([\x80-\x9d]|[\xa0-\xbf])|\x9b[\x80-\xaf]|\x9c([\x97-\x9f]|[\xa2-\xbf])|\x9d(\xb0|[\x80-\xaf]|[\xb1-\xbf])|\x9e(\x88|\x8f|[\x80-\x87]|[\x8b-\x8e]|[\x90-\xb9])|\x9f(\xb7|\xba|[\xb8\xb9]|[\xbb-\xbf])|\xa0([\x80\x81]|[\x83-\x85]|[\x87-\x8a]|[\x8c-\xa2])|\xa1[\x80-\xb3]|\xa2[\x82-\xb3]|\xa3(\xbb|[\xb2-\xb7]|[\xbd\xbe])|\xa4([\x8a-\xa5]|[\xb0-\xbf])|\xa5([\x80-\x86]|[\xa0-\xbc])|\xa6[\x84-\xb2]|\xa7(\x8f|\xa6|[\xa0-\xa4]|[\xa7-\xaf]|[\xba-\xbe])|\xa8[\x80-\xa8]|\xa9(\xb0|\xba|[\x80-\x82]|[\x84-\x8b]|[\xa0-\xaf]|[\xb1-\xb6]|[\xbe\xbf])|\xaa(\xb1|[\x80-\xaf]|[\xb5\xb6]|[\xb9-\xbd])|\xab(\x80|\x82|\x9d|\xb2|[\x9b\x9c]|[\xa0-\xaa]|[\xb3\xb4])|\xac([\x81-\x86]|[\x89-\x8e]|[\x91-\x96]|[\xa0-\xa6]|[\xa8-\xae]|[\xb0-\xbf])|\xad([\x80-\x9a]|[\x9c-\xa5]|[\xb0-\xbf])|\xaf[\x80-\xa2]|[\x81-\x91][\x80-\xbf]|[\x94-\x97][\x80-\xbf]|\xae[\x80-\xbf]|[\xb0-\xbf][\x80-\xbf])|\xed(\x9e([\x80-\xa3]|[\xb0-\xbf])|\x9f([\x80-\x86]|[\x8b-\xbb])|[\x80-\x9d][\x80-\xbf])
    xid_start_5         \xef(\xa9([\x80-\xad]|[\xb0-\xbf])|\xab[\x80-\x99]|\xac(\x9d|\xbe|[\x80-\x86]|[\x93-\x97]|[\x9f-\xa8]|[\xaa-\xb6]|[\xb8-\xbc])|\xad([\x80\x81]|[\x83\x84]|[\x86-\xbf])|\xae[\x80-\xb1]|\xaf[\x93-\xbf]|\xb1([\x80-\x9d]|[\xa4-\xbf])|\xb4[\x80-\xbd]|\xb5[\x90-\xbf]|\xb6([\x80-\x8f]|[\x92-\xbf])|\xb7([\x80-\x87]|[\xb0-\xb9])|\xb9(\xb1|\xb3|\xb7|\xb9|\xbb|\xbd|\xbf)|\xbb[\x80-\xbc]|\xbc[\xa1-\xba]|\xbd(\xb0|[\x81-\x9a]|[\xa6-\xaf]|[\xb1-\xbf])|\xbe([\x80-\x9d]|[\xa0-\xbe])|\xbf([\x82-\x87]|[\x8a-\x8f]|[\x92-\x97]|[\x9a-\x9c])|[\xa4-\xa8][\x80-\xbf]|\xaa[\x80-\xbf]|\xb0[\x80-\xbf]|[\xb2\xb3][\x80-\xbf]|\xba[\x80-\xbf])|[\xe5-\xe8][\x80-\xbf][\x80-\xbf]|[\xeb\xec][\x80-\xbf][\x80-\xbf]
    xid_start_6a        \x90(\x80([\x80-\x8b]|[\x8d-\xa6]|[\xa8-\xba]|[\xbc\xbd]|\xbf)|\x81([\x80-\x8d]|[\x90-\x9d])|\x83[\x80-\xba]|\x85[\x80-\xb4]|\x8a([\x80-\x9c]|[\xa0-\xbf])|\x8b[\x80-\x90]|\x8c([\x80-\x9f]|[\xad-\xbf])|\x8d(\x81|\x8a|\x80|[\x82-\x89]|[\x90-\xb5])|\x8e([\x80-\x9d]|[\xa0-\xbf])|\x8f([\x80-\x83]|[\x88-\x8f]|[\x91-\x95])|\x92([\x80-\x9d]|[\xb0-\xbf])|\x93([\x80-\x93]|[\x98-\xbb])|\x94([\x80-\xa7]|[\xb0-\xbf])|\x95[\x80-\xa3]|\x9c[\x80-\xb6]|\x9d([\x80-\x95]|[\xa0-\xa7])|\xa0(\x88|\xbc|[\x80-\x85]|[\x8a-\xb5]|[\xb7\xb8]|\xbf)|\xa1([\x80-\x95]|[\xa0-\xb6])|\xa2[\x80-\x9e]|\xa3([\xa0-\xb2]|[\xb4\xb5])|\xa4([\x80-\x95]|[\xa0-\xb9])|\xa6([\x80-\xb7]|[\xbe\xbf])|\xa8(\x80|[\x90-\x93]|[\x95-\x97]|[\x99-\xb5])|\xa9[\xa0-\xbc]|\xaa[\x80-\x9c]|\xab([\x80-\x87]|[\x89-\xa4])|\xac[\x80-\xb5]|\xad([\x80-\x95]|[\xa0-\xb2])|\xae[\x80-\x91]|\xb1[\x80-\x88]|\xb2[\x80-\xb2]|\xb3[\x80-\xb2]|\xb4[\x80-\xa3]|\xbc(\xa7|[\x80-\x9c]|[\xb0-\xbf])|\xbd[\x80-\x85]|\x82[\x80-\xbf]|[\x90\x91][\x80-\xbf]|[\x98-\x9b][\x80-\xbf]|\xb0[\x80-\xbf])|\x91(\x80[\x83-\xb7]|\x82[\x83-\xaf]|\x83[\x90-\xa8]|\x84[\x83-\xa6]|\x85(\x84|\xb6|[\x90-\xb2])|\x86[\x83-\xb2]|\x87(\x9a|\x9c|[\x81-\x84])|\x88([\x80-\x91]|[\x93-\xab])|\x8a(\x88|[\x80-\x86]|[\x8a-\x8d]|[\x8f-\x9d]|[\x9f-\xa8]|[\xb0-\xbf])|\x8b[\x80-\x9e]|\x8c(\xbd|[\x85-\x8c]|[\x8f\x90]|[\x93-\xa8]|[\xaa-\xb0]|[\xb2\xb3]|[\xb5-\xb9])|\x8d(\x90|[\x9d-\xa1])|\x90[\x80-\xb4]|\x91[\x87-\x8a]|\x92[\x80-\xaf]|\x93(\x87|[\x84\x85])|\x96[\x80-\xae]|\x97[\x98-\x9b]|\x98[\x80-\xaf]|\x99\x84|\x9a[\x80-\xaa]|\x9c[\x80-\x9a]|\xa0[\x80-\xab]|\xa2[\xa0-\xbf]|\xa3(\xbf|[\x80-\x9f])|\xa8(\x80|\xba|[\x8b-\xb2])|\xa9(\x90|[\x9c-\xbf])|\xaa(\x9d|[\x80-\x83]|[\x86-\x89])|\xab[\x80-\xb8]|\xb0([\x80-\x88]|[\x8a-\xae])|\xb1(\x80|[\xb2-\xbf])|\xb2[\x80-\x8f]|\xb4([\x80-\x86]|[\x88\x89]|[\x8b-\xb0])|\xb5(\x86|[\xa0-\xa5]|[\xa7\xa8]|[\xaa-\xbf])|\xb6(\x98|[\x80-\x89])|\xbb[\xa0-\xb2])|\x92(\x8e[\x80-\x99]|\x91[\x80-\xae]|\x95[\x80-\x83]|[\x80-\x8d][\x80-\xbf]|\x90[\x80-\xbf]|[\x92-\x94][\x80-\xbf])
    xid_start_6b        \x93(\x90[\x80-\xae]|[\x80-\x8f][\x80-\xbf])|\x94(\x99[\x80-\x86]|[\x90-\x98][\x80-\xbf])|\x96(\xa8[\x80-\xb8]|\xa9[\x80-\x9e]|\xab[\x90-\xad]|\xac[\x80-\xaf]|\xad([\x80-\x83]|[\xa3-\xb7]|[\xbd-\xbf])|\xae[\x80-\x8f]|\xbd(\x90|[\x80-\x84])|\xbe[\x93-\x9f]|\xbf[\xa0\xa1]|[\xa0-\xa7][\x80-\xbf]|\xb9[\x80-\xbf]|\xbc[\x80-\xbf])|\x98(\x9f[\x80-\xb1]|\xab[\x80-\xb2]|[\x80-\x9e][\x80-\xbf]|[\xa0-\xaa][\x80-\xbf])|\x9b(\x84[\x80-\x9e]|\x85[\xb0-\xbf]|\x8b[\x80-\xbb]|\xb1([\x80-\xaa]|[\xb0-\xbc])|\xb2([\x80-\x88]|[\x90-\x99])|[\x80-\x83][\x80-\xbf]|[\x86-\x8a][\x80-\xbf]|\xb0[\x80-\xbf])|\x9d(\x91([\x80-\x94]|[\x96-\xbf])|\x92(\xa2|\xbb|[\x80-\x9c]|[\x9e\x9f]|[\xa5\xa6]|[\xa9-\xac]|[\xae-\xb9]|[\xbd-\xbf])|\x93([\x80-\x83]|[\x85-\xbf])|\x94([\x80-\x85]|[\x87-\x8a]|[\x8d-\x94]|[\x96-\x9c]|[\x9e-\xb9]|[\xbb-\xbe])|\x95(\x86|[\x80-\x84]|[\x8a-\x90]|[\x92-\xbf])|\x9a([\x80-\xa5]|[\xa8-\xbf])|\x9b(\x80|[\x82-\x9a]|[\x9c-\xba]|[\xbc-\xbf])|\x9c([\x80-\x94]|[\x96-\xb4]|[\xb6-\xbf])|\x9d([\x80-\x8e]|[\x90-\xae]|[\xb0-\xbf])|\x9e([\x80-\x88]|[\x8a-\xa8]|[\xaa-\xbf])|\x9f([\x80-\x82]|[\x84-\x8b])|\x90[\x80-\xbf]|[\x96-\x99][\x80-\xbf])|\x9e(\xa3[\x80-\x84]|\xa5[\x80-\x83]|\xb8(\xa4|\xa7|\xb9|\xbb|[\x80-\x83]|[\x85-\x9f]|[\xa1\xa2]|[\xa9-\xb2]|[\xb4-\xb7])|\xb9(\x82|\x87|\x89|\x8b|\x94|\x97|\x99|\x9b|\x9d|\x9f|\xa4|\xbe|[\x8d-\x8f]|[\x91\x92]|[\xa1\xa2]|[\xa7-\xaa]|[\xac-\xb2]|[\xb4-\xb7]|[\xb9-\xbc])|\xba([\x80-\x89]|[\x8b-\x9b]|[\xa1-\xa3]|[\xa5-\xa9]|[\xab-\xbb])|[\xa0-\xa2][\x80-\xbf]|\xa4[\x80-\xbf])|\xaa(\x9b[\x80-\x96]|[\x80-\x9a][\x80-\xbf]|[\x9c-\xbf][\x80-\xbf])|\xab(\x9c[\x80-\xb4]|\xa0([\x80-\x9d]|[\xa0-\xbf])|[\x80-\x9b][\x80-\xbf]|[\x9d-\x9f][\x80-\xbf]|[\xa1-\xbf][\x80-\xbf])|\xac(\xba([\x80-\xa1]|[\xb0-\xbf])|[\x80-\xb9][\x80-\xbf]|[\xbb-\xbf][\x80-\xbf])|\xae(\xaf[\x80-\xa0]|[\x80-\xae][\x80-\xbf])|\xaf(\xa8[\x80-\x9d]|[\xa0-\xa7][\x80-\xbf])|\x97[\x80-\xbf][\x80-\xbf]|[\xa0-\xa9][\x80-\xbf][\x80-\xbf]|\xad[\x80-\xbf][\x80-\xbf]
    xid_start_6         \xf0({xid_start_6a}|{xid_start_6b})

    xid_cont_1          \x5f|[\x30-\x39]|\xc2\xb7|\xcd[\x80-\xaf]|\xce\x87|\xd2[\x83-\x87]|\xd6(\xbf|[\x91-\xbd])|\xd7(\x87|[\x81\x82]|[\x84\x85])|\xd8[\x90-\x9a]|\xd9(\xb0|[\x8b-\xa9])|\xdb([\x96-\x9c]|[\x9f-\xa4]|[\xa7\xa8]|[\xaa-\xad]|[\xb0-\xb9])|\xdc(\x91|[\xb0-\xbf])|\xdd[\x80-\x8a]|\xde[\xa6-\xb0]|\xdf(\xbd|[\x80-\x89]|[\xab-\xb3])|\xcc[\x80-\xbf]|\xe0(\xa0([\x96-\x99]|[\x9b-\xa3]|[\xa5-\xa7]|[\xa9-\xad])|\xa1[\x99-\x9b]|\xa3([\x93-\xa1]|[\xa3-\xbf])|\xa4(\x83|\xba|\xbb|\xbc|[\x80-\x82]|[\xbe\xbf])|\xa5(\x8d|[\x80-\x8c]|[\x8e\x8f]|[\x91-\x97]|[\xa2\xa3]|[\xa6-\xaf])|\xa6(\x81|\xbc|[\x82\x83]|[\xbe\xbf])|\xa7(\x8d|\x97|\xbe|[\x80-\x84]|[\x87\x88]|[\x8b\x8c]|[\xa2\xa3]|[\xa6-\xaf])|\xa8(\x83|\xbc|[\x81\x82]|[\xbe\xbf])|\xa9(\x91|\xb5|[\x80-\x82]|[\x87\x88]|[\x8b-\x8d]|[\xa6-\xb1])|\xaa(\x83|\xbc|[\x81\x82]|[\xbe\xbf])|\xab(\x89|\x8d|[\x80-\x85]|[\x87\x88]|[\x8b\x8c]|[\xa2\xa3]|[\xa6-\xaf]|[\xba-\xbf])|\xac(\x81|\xbc|\xbe|\xbf|[\x82\x83])|\xad(\x80|\x8d|\x96|\x97|[\x81-\x84]|[\x87\x88]|[\x8b\x8c]|[\xa2\xa3]|[\xa6-\xaf])|\xae(\x82|[\xbe\xbf])|\xaf(\x80|\x8d|\x97|[\x81\x82]|[\x86-\x88]|[\x8a-\x8c]|[\xa6-\xaf])|\xb0(\x80|\x84|[\x81-\x83]|[\xbe\xbf])|\xb1([\x80-\x84]|[\x86-\x88]|[\x8a-\x8d]|[\x95\x96]|[\xa2\xa3]|[\xa6-\xaf])|\xb2(\x81|\xbc|\xbe|\xbf|[\x82\x83])|\xb3(\x86|[\x80-\x84]|[\x87\x88]|[\x8a-\x8d]|[\x95\x96]|[\xa2\xa3]|[\xa6-\xaf])|\xb4([\x80-\x83]|[\xbb\xbc]|[\xbe\xbf])|\xb5(\x8d|\x97|[\x80-\x84]|[\x86-\x88]|[\x8a-\x8c]|[\xa2\xa3]|[\xa6-\xaf])|\xb6[\x82\x83]|\xb7(\x8a|\x96|[\x8f-\x94]|[\x98-\x9f]|[\xa6-\xaf]|[\xb2\xb3])|\xb8(\xb1|[\xb2-\xba])|\xb9([\x87-\x8e]|[\x90-\x99])|\xba(\xb1|[\xb2-\xb9]|[\xbb\xbc])|\xbb([\x88-\x8d]|[\x90-\x99])|\xbc(\xb5|\xb7|\xb9|[\x98\x99]|[\xa0-\xa9]|[\xbe\xbf])|\xbd(\xbf|[\xb1-\xbe])|\xbe([\x80-\x84]|[\x86\x87]|[\x8d-\x97]|[\x99-\xbc])|\xbf\x86)
    xid_cont_2          \xe1(\x80(\xb1|\xb8|[\xab-\xb0]|[\xb2-\xb7]|[\xb9-\xbe])|\x81([\x80-\x89]|[\x96-\x99]|[\x9e-\xa0]|[\xa2-\xa4]|[\xa7-\xad]|[\xb1-\xb4])|\x82(\x82|\x8d|\x8f|\x9d|[\x83-\x8c]|[\x90-\x9c])|\x8d([\x9d-\x9f]|[\xa9-\xb1])|\x9c([\x92-\x94]|[\xb2-\xb4])|\x9d([\x92\x93]|[\xb2\xb3])|\x9e(\xb6|[\xb4\xb5]|[\xb7-\xbf])|\x9f(\x86|\x9d|[\x80-\x85]|[\x87-\x93]|[\xa0-\xa9])|\xa0([\x8b-\x8d]|[\x90-\x99])|\xa2\xa9|\xa4(\xb2|[\xa0-\xab]|[\xb0\xb1]|[\xb3-\xbb])|\xa5[\x86-\x8f]|\xa7(\x9a|[\x90-\x99])|\xa8(\x9b|[\x97-\x9a])|\xa9(\x95|\x96|\x97|\xa0|\xa1|\xa2|\xbf|[\x98-\x9e]|[\xa3-\xbc])|\xaa([\x80-\x89]|[\x90-\x99]|[\xb0-\xbd])|\xac(\x84|\xb4|\xb5|\xbb|\xbc|[\x80-\x83]|[\xb6-\xba]|[\xbd-\xbf])|\xad(\x82|[\x80\x81]|[\x83\x84]|[\x90-\x99]|[\xab-\xb3])|\xae(\x82|\xa1|\xaa|[\x80\x81]|[\xa2-\xa9]|[\xab-\xad]|[\xb0-\xb9])|\xaf(\xa6|\xa7|\xad|\xae|[\xa8-\xac]|[\xaf-\xb3])|\xb0[\xa4-\xb7]|\xb1([\x80-\x89]|[\x90-\x99])|\xb3(\xa1|\xad|\xb4|\xb7|[\x90-\x92]|[\x94-\xa0]|[\xa2-\xa8]|[\xb2\xb3]|[\xb8\xb9])|\xb7([\x80-\xb9]|[\xbb-\xbf]))|\xe2(\x80\xbf|\x81(\x94|\x80)|\x83(\xa1|[\x90-\x9c]|[\xa5-\xb0])|\xb3[\xaf-\xb1]|\xb5\xbf|\xb7[\xa0-\xbf])|\xe3(\x80[\xaa-\xaf]|\x82[\x99\x9a])|\xea(\x98[\xa0-\xa9]|\x99(\xaf|[\xb4-\xbd])|\x9a[\x9e\x9f]|\x9b[\xb0\xb1]|\xa0(\x82|\x86|\x8b|\xa7|[\xa3-\xa6])|\xa2([\x80\x81]|[\xb4-\xbf])|\xa3(\xbf|[\x80-\x85]|[\x90-\x99]|[\xa0-\xb1])|\xa4([\x80-\x89]|[\xa6-\xad])|\xa5[\x87-\x93]|\xa6(\x83|\xb3|\xbc|[\x80-\x82]|[\xb4-\xbb]|[\xbd-\xbf])|\xa7(\xa5|\x80|[\x90-\x99]|[\xb0-\xb9])|\xa8[\xa9-\xb6]|\xa9(\x83|\x8c|\x8d|\xbb|\xbc|\xbd|[\x90-\x99])|\xaa(\xb0|[\xb2-\xb4]|[\xb7\xb8]|[\xbe\xbf])|\xab(\x81|\xab|\xb5|\xb6|[\xac-\xaf])|\xaf(\xa5|\xa8|\xac|\xad|[\xa3\xa4]|[\xa6\xa7]|[\xa9\xaa]|[\xb0-\xb9]))|\xef(\xac\x9e|\xb8([\x80-\x8f]|[\xa0-\xaf]|[\xb3\xb4])|\xb9[\x8d-\x8f]|\xbc(\xbf|[\x90-\x99])|\xbe[\x9e\x9f])
    xid_cont_3          \xf0(\x90(\x87\xbd|\x8b\xa0|\x8d[\xb6-\xba]|\x92[\xa0-\xa9]|\xa8(\xbf|[\x81-\x83]|[\x85\x86]|[\x8c-\x8f]|[\xb8-\xba])|\xab[\xa5\xa6]|\xb4([\xa4-\xa7]|[\xb0-\xb9])|\xbd[\x86-\x90])|\x91(\x80(\x80|\x81|\x82|[\xb8-\xbf])|\x81([\x80-\x86]|[\xa6-\xaf]|\xbf)|\x82(\x82|[\x80\x81]|[\xb0-\xba])|\x83[\xb0-\xb9]|\x84(\xac|[\x80-\x82]|[\xa7-\xab]|[\xad-\xb4]|[\xb6-\xbf])|\x85(\xb3|[\x85\x86])|\x86(\x82|[\x80\x81]|[\xb3-\xbf])|\x87(\x80|[\x89-\x8c]|[\x90-\x99])|\x88(\xb4|\xb5|\xbe|[\xac-\xb3]|[\xb6\xb7])|\x8b(\x9f|[\xa0-\xaa]|[\xb0-\xb9])|\x8c([\x80-\x83]|[\xbb\xbc]|[\xbe\xbf])|\x8d(\x80|\x97|[\x81-\x84]|[\x87\x88]|[\x8b-\x8d]|[\xa2\xa3]|[\xa6-\xac]|[\xb0-\xb4])|\x90[\xb5-\xbf]|\x91(\x85|\x86|\x9e|[\x80-\x84]|[\x90-\x99])|\x92(\xb9|\xba|[\xb0-\xb8]|[\xbb-\xbf])|\x93(\x81|\x80|[\x82\x83]|[\x90-\x99])|\x96(\xbe|[\xaf-\xb5]|[\xb8-\xbd]|\xbf)|\x97(\x80|[\x9c\x9d])|\x98(\xbd|\xbe|[\xb0-\xbc]|\xbf)|\x99(\x80|[\x90-\x99])|\x9a(\xab|\xac|\xad|\xb6|\xb7|[\xae-\xb5])|\x9b[\x80-\x89]|\x9c(\xa6|[\x9d-\xa5]|[\xa7-\xab]|[\xb0-\xb9])|\xa0(\xb8|[\xac-\xb7]|[\xb9\xba])|\xa3[\xa0-\xa9]|\xa8(\xb9|[\x81-\x8a]|[\xb3-\xb8]|[\xbb-\xbe])|\xa9(\x87|[\x91-\x9b])|\xaa(\x97|[\x8a-\x96]|[\x98\x99])|\xb0(\xaf|\xbe|\xbf|[\xb0-\xb6]|[\xb8-\xbd])|\xb1[\x90-\x99]|\xb2(\xa9|\xb1|\xb4|[\x92-\xa7]|[\xaa-\xb0]|[\xb2\xb3]|[\xb5\xb6])|\xb4(\xba|[\xb1-\xb6]|[\xbc\xbd]|\xbf)|\xb5(\x87|[\x80-\x85]|[\x90-\x99])|\xb6(\x95|\x96|\x97|[\x8a-\x8e]|[\x90\x91]|[\x93\x94]|[\xa0-\xa9])|\xbb[\xb3-\xb6])|\x96(\xa9[\xa0-\xa9]|\xab[\xb0-\xb4]|\xac[\xb0-\xb6]|\xad[\x90-\x99]|\xbd[\x91-\xbe]|\xbe[\x8f-\x92])|\x9b\xb2[\x9d\x9e]|\x9d(\x85([\xa5-\xa9]|[\xad-\xb2]|[\xbb-\xbf])|\x86([\x80-\x82]|[\x85-\x8b]|[\xaa-\xad])|\x89[\x82-\x84]|\x9f[\x8e-\xbf]|\xa8([\x80-\xb6]|[\xbb-\xbf])|\xa9(\xb5|[\x80-\xac])|\xaa(\x84|[\x9b-\x9f]|[\xa1-\xaf]))|\x9e(\x80([\x80-\x86]|[\x88-\x98]|[\x9b-\xa1]|[\xa3\xa4]|[\xa6-\xaa])|\xa3[\x90-\x96]|\xa5([\x84-\x8a]|[\x90-\x99])))|\xf3\xa0(\x87[\x80-\xaf]|[\x84-\x86][\x80-\xbf])

    xid_start           {xid_start_1}|{xid_start_2}|{xid_start_3}|{xid_start_4}|{xid_start_5}|{xid_start_6}
    xid_continue        {xid_start}|{xid_cont_1}|{xid_cont_2}|{xid_cont_3}

    identifier          (_|{xid_start}){xid_continue}*
    */
    
%%
    // Declarations within yylex() scope.
    PyObject *pycolor       = NULL;
    PyObject *pylast_color  = NULL;
    PyObject *pystr         = NULL;

    // Lexer rules with blocks of action code inserted into yylex() follow...

">>>" {
        // Command prompt.
        lappend2(params->origattr_color, yytext);
        break;
    }

[+-]?{integer}|{float}|{exponential}|{imaginary} {
        // Number.
        lappend2(params->number_color, yytext);
        break;
    }

(def|class)[ \t]+ {
        // def or class declaration.
        BEGIN(defclassdecl);
        lappend2(params->keyword_color, yytext);
        break;
    }

<defclassdecl>{identifier} {
        // Make class and function names same color as buitins in their 
        // declaration.
        BEGIN(INITIAL);
        lappend2(params->builtins_color, yytext);
        break;
    }

False|True|None
async|await|yield|assert
if|elif|else
while|for|continue|break|return|pass
lambda
try|except|raise|finally
in|is|and|not|or
import|from
with|as
global|nonlocal
del  {
        // Keywords.
        lappend2(params->keyword_color, yytext);
        break;
    }

"+"|"-"|"*"|"/"|"%"|"**"|"//"
"<<"|">>"|"&"|"|"|"^"|"~"
"<"|">"|"<="|">="|"=="|"!="
"("|")"|"@"|"->"
"["|"]"|"{"|"}"
","|":"|"."|";"
"="|"+="|"-="|"*="|"/="|"//="|"%="|"@="
"&="|"|="|"^="|">>="|"<<="|"**="|"..."  {
        // Operators and delimiters.
        lappend2(params->operator_color, yytext);
        break;
    }

{identifier} {
        // Identifier.
        pystr = PyUnicode_FromString(yytext);
        if (PySequence_Contains(params->builtins_list, pystr)) {
            // Different color for identifiers in the list of builtins.
            pycolor = params->builtins_color;
        }
        else {
            pycolor = params->origattr_color;
        }
        if (pycolor != pylast_color) {
            PyList_Append(pylist, pycolor);
        }
        PyList_Append(pylist, pystr);
        Py_DECREF(pystr);
        pylast_color = pycolor;
        break;
    }

#.*$ {
        // Comment.
        lappend2(params->comment_color, yytext);
        break;
    }


\\(\r?\n|\r) {
        // Line continuation.
        lappend1(yytext);
        pylast_color = NULL;
        break;
    }

[ \t\r]+ {
        // Whitespace.
        lappend1(yytext);
        break;
    }

\n {
        // Newline.
        lappend1(yytext);
        pylast_color = NULL;
        break;
    }

{stringprefix}?\"\"\" {
        // <longquotestring> BEGIN.
        BEGIN(longquotestring);
        lappend2(params->string_color, yytext);
        break;
    }

<longquotestring>(\"|\"\")|[^"\r\n]* {
        // <longquotestring> Allowable characters.
        lappend1(yytext);
        break;
    }

<longquotestring,longtickstring>(\r?\n)|\r {
        // Add color code to new line.
        lappend1(yytext);
        PyList_Append(pylist, params->string_color);
        break;
    }

<longquotestring>\"\"\" {
        // <longquotestring> END.
        BEGIN(INITIAL);
        lappend1(yytext);
        break;
    }

{stringprefix}?''' {
        // <longtickstring> BEGIN.
        BEGIN(longtickstring);
        lappend2(params->string_color, yytext);
        break;
    }

<longtickstring>('|'')|[^'\r\n]* {
        lappend1(yytext);
        break;
    }

<longtickstring>''' {
        // <longtickstring> END.
        BEGIN(INITIAL);
        lappend1(yytext);
        break;
    }

{stringprefix}?\" {
        // <shortquotestring> BEGIN.
        BEGIN(shortquotestring);
        lappend2(params->string_color, yytext);
        break;
    }

<shortquotestring>([^"\r\n\\]|\\.)* {
        // <shortquotestring> Allow any character except unescaped newlines.
        lappend1(yytext);
        break;
    }

<shortquotestring,shorttickstring>\\((\r?\n)|\r) {
        // Line continuation (escaped newline). Add color code to new line.
        lappend1(yytext);
        PyList_Append(pylist, params->string_color);
        break;
    }

<shortquotestring>\" {
        // <shortquotestring> END.
        BEGIN(INITIAL);
        lappend1(yytext);
        break;
    }

{stringprefix}?' {
        // <shorttickstring> BEGIN.
        BEGIN(shorttickstring);
        lappend2(params->string_color, yytext);
        break;
    }

<shorttickstring>([^'\r\n\\]|\\.)* {
        lappend1(yytext);
        break;
    }

<shorttickstring>' {
        // <shorttickstring> END.
        BEGIN(INITIAL);
        lappend1(yytext);
        break;
    }

%%

/**
 * Colorizes the given string of Python code using IRC color codes. 
 * Returns the colorized string.
 * @param pystring  - the string of Python code to colorize.
 * @param params    - parameters with color assignments.
 * @returns the color coded string for printing in the HexChat Python console.
 */
PyObject *
flex_colorize(PyObject *pystring, ColorizerParams *params)
{
    Py_ssize_t  size;
    const char  *base;
    PyObject    *pystr;
    PyObject    *pylist     = PyList_New(0);
    PyObject    *pyemptystr = PyUnicode_FromString("");
    yyscan_t    scanner;

    YY_BUFFER_STATE buf;

    base = PyUnicode_AsUTF8AndSize(pystring, &size);

    yylex_init(&scanner);

    buf = yy_scan_bytes(base, (int)size, scanner);

    yylex(scanner, pylist, params);

    yy_delete_buffer(buf, scanner);
    yylex_destroy(scanner);

    pystr = PyUnicode_Join(pyemptystr, pylist);

    Py_DECREF(pyemptystr);
    Py_DECREF(pylist);

    return pystr;
}





