/*******************************************************************************
 * MIT License
 *
 * Copyright (c) 2018 tmtappr@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in 
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/
 
/**
 * This header provides access to functions and structures shared between the 
 * modules of the project. For more documentation on anything in particular, see 
 * the related C files where the items are declared:
 *
 * asyncresult.c -  The return value of asynchronous calls to the hexchat API.
 *                  When the asynchronous interface is used, each function
 *                  returns immediately with an AsyncResult object that can be
 *                  either ignored, or used to block for the result of the call.
 * colorizelexer.yy.c
 *               -  This is an autogenerated file from Flex run on the 
 *                  colorizelexer.flex input file. It provides a function to
 *                  colorize Python source code used mainly by the console.
 * colorizelexer.flex
 *               -  Defines a simple token grammar used to add color codes to
 *                  Python text. This is the input file to Flex to produce the
 *                  lexer C file.
 * console.c     -  Very similar to the console of the predecessor. There is 
 *                  *one* console interpreter accessible through the console or
 *                  from any window via /MPY EXEC or /MPY CONSOLE.
 * context.c     -  Declares the Context type which can be used to invoke
 *                  select API calls within a given context.
 * delegate.c    -  Declares a type that can be used to wrap API functions,
 *                  or user defined functions. The delegate is callable, and
 *                  when invoked executes its wrapped function on the hexchat
 *                  main thread. A Delegate can be synchronous or asynchronous
 *                  which is specified by the constructor's `is_async` 
 *                  parameter.
 * delegateproxy.c
 *               -  DelegateProxy objects wrap the hexchat module and provide
 *                  ready-made delegates for the hexchat API. In the hexchat
 *                  module there's an `asynchronous` and `synchronous` proxy.
 *                  The synchronous proxy interface provides delegates to 
 *                  execute API calls on the main thread and blocks until the 
 *                  result is available, returning it to the caller.
 *                  The asynchronous proxy provides asynchronous delegates for
 *                  the hexchat API that return immediately with an 
 *                  AsyncResult object.
 * eventattrs.c  -  Declares a simple structure for hexchat attrs. This just has 
 *                  a field with a time_t value. Some API calls use this.
 * listiter.c    -  Declares a list iterator type for lists requested via
 *                  hexchat.get_listiter(). This provides fast access to lists.
 *                  In contrast, get_list() constructs all the list data before
 *                  returning; this list will be a list of namedtuple objects.
 *                  The ListIter object provides properties for each field of
 *                  the particular list it is associated with. `next(ListIter)` 
 *                  does not return list items - it returns itself with its 
 *                  internal pointer set to the next item in the hexchat 
 *                  internal list.
 * minpython.c   -  This is the main file of the library which declares the
 *                  Python wrappers to the hexchat API. It also has the plugin
 *                  init and deinit functions.
 * outstream.c   -  Declares the OutStream type wich is assigned to stdout and
 *                  stderr for each subinterpreter. The Python print() function
 *                  writes to these objects. Error output from scripts is
 *                  colorized in red by stderr.
 * plugin.c      -  Declares functions specific to plugins for loading and
 *                  unloading. It maintains a linked list of the currently
 *                  loaded plugins.
 * subinterp.c   -  Provides functions related to subinterpeters, such as 
 *                  switching between them, accessing per-interpreter data,
 *                  managing hexchat callback hooks for each interp, etc.
 */
 
#ifndef __MINPYTHON_H__
#define __MINPYTHON_H__

#include <Python.h>
#include <pythread.h>
#include <stdbool.h>
#include "structmember.h"
#include "hexchat-plugin.h"

/**
 * Global vars.
 */
extern hexchat_plugin *ph;
extern PyThreadState  *py_g_main_threadstate;

/**
 * Pointers to the types declared in this library. Declaration for each is in
 * the similarly named C file.
 */ 
extern PyTypeObject *OutStreamTypePtr;
extern PyTypeObject *EventAttrsTypePtr;
extern PyTypeObject *ContextTypePtr;
extern PyTypeObject *ListIterTypePtr;
extern PyTypeObject *DelegateTypePtr;
extern PyTypeObject *DelegateProxyTypePtr;
extern PyTypeObject *AsyncResultTypePtr;

/**
 * Python functions declared in minpython.c needed by context.c
 */
extern PyObject     *py_emit_print         (PyObject *, PyObject *, PyObject *);
extern PyObject     *py_get_info           (PyObject *, PyObject *);
extern PyObject     *py_get_list           (PyObject *, PyObject *);
extern PyObject     *py_get_listiter       (PyObject *, PyObject *);

/**
 * Enforces the policy that hexchat API calls need to occur on the main thread.
 */
extern int          main_thread_check      (void);

/**
 * Capsule free function used when a capsule is created for an attrs pointer.
 */
extern void         py_attrs_free_fn       (PyObject *);

/**
 * AsyncResult utility functions for setting result or error info.
 */
extern void         asyncresult_set_error  (PyObject *, PyObject *);
extern void         asyncresult_set_result (PyObject *, PyObject *);

/**
 * Struct used to assign color codes to syntax items for the colorizer.
 * Syntax highlighting is a outstream.c/colorizelexer.c feature.
 */
typedef struct {
    PyObject *builtins_list;
    PyObject *string_color;
    PyObject *number_color;
    PyObject *keyword_color;
    PyObject *operator_color;
    PyObject *origattr_color;
    PyObject *comment_color;
    PyObject *builtins_color;
} ColorizerParams;

/**
 * Colorizes Python code text for outstream. Defined in colorizelexer.flex.
 */
extern PyObject  *flex_colorize             (PyObject *, ColorizerParams *);

/**
 * Struct and functions for switching to subinterpreters and back to the prior
 * interpreter. See subinterp.c.
 */
typedef struct {
    int           do_swap;
    int           do_release;
    PyThreadState *prior;
} SwitchTSInfo;

extern SwitchTSInfo switch_threadstate      (PyThreadState *);
extern void         switch_threadstate_back (SwitchTSInfo);

/**
 * Functions declared in console.c 
 */
extern int  create_console_interp   (void);
extern int  delete_console_interp   (void);
extern int  exec_console_command    (const char *);
extern int  create_console          (void);
extern int  close_console           (void);

/**
 * Functions declared in plugins.c
 */
extern int  init_plugins            (void);
extern int  delete_plugins          (void);
extern int  load_plugin             (char *);
extern int  unload_plugin           (char *);

/**
 * Functions declared in subinterp.c.
 */
typedef int (*interp_config_func)(PyThreadState *, void *);

extern PyThreadState   *create_interp              (interp_config_func, void *);
extern int             delete_interp               (PyThreadState *, 
                                                    interp_config_func,
                                                    void *);
                                                    
extern int             interp_set_up_stdout_stderr  (void);
extern PyThreadState   *interp_get_main_threadstate (void);
extern void            interp_add_hook              (PyObject *);
extern PyObject        *interp_hook_unload          (PyObject *, PyObject *);
extern PyObject        *interp_unhook_unload        (PyObject *);
extern PyObject        *interp_get_hooks            (void); // BR.
extern PyObject        *interp_get_unload_hooks     (void); // BR.
extern PyObject        *interp_get_queue_constr     (void); // BR.
extern PyObject        *interp_get_namedtuple_constr(void); // BR.
extern PyObject        *interp_get_lists_info       (void); // BR.
extern PyObject        *interp_get_plugin_name      (void); // NR.

#endif // __MINPYTHON_H__ 
